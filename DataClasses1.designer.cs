#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gro_bot
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="grobot")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGardenBed(GardenBed instance);
    partial void UpdateGardenBed(GardenBed instance);
    partial void DeleteGardenBed(GardenBed instance);
    partial void InsertPlantType(PlantType instance);
    partial void UpdatePlantType(PlantType instance);
    partial void DeletePlantType(PlantType instance);
    partial void InsertBedFeedbackValue(BedFeedbackValue instance);
    partial void UpdateBedFeedbackValue(BedFeedbackValue instance);
    partial void DeleteBedFeedbackValue(BedFeedbackValue instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["grobotConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GardenBed> GardenBeds
		{
			get
			{
				return this.GetTable<GardenBed>();
			}
		}
		
		public System.Data.Linq.Table<PlantType> PlantTypes
		{
			get
			{
				return this.GetTable<PlantType>();
			}
		}
		
		public System.Data.Linq.Table<BedFeedbackValue> BedFeedbackValues
		{
			get
			{
				return this.GetTable<BedFeedbackValue>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GardenBeds")]
	public partial class GardenBed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bedID;
		
		private string _bedName;
		
		private int _typeID;
		
		private System.Nullable<int> _length;
		
		private System.Nullable<int> _width;
		
		private EntityRef<BedFeedbackValue> _BedFeedbackValue;
		
		private EntityRef<PlantType> _PlantType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbedIDChanging(int value);
    partial void OnbedIDChanged();
    partial void OnbedNameChanging(string value);
    partial void OnbedNameChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OnlengthChanging(System.Nullable<int> value);
    partial void OnlengthChanged();
    partial void OnwidthChanging(System.Nullable<int> value);
    partial void OnwidthChanged();
    #endregion
		
		public GardenBed()
		{
			this._BedFeedbackValue = default(EntityRef<BedFeedbackValue>);
			this._PlantType = default(EntityRef<PlantType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bedID
		{
			get
			{
				return this._bedID;
			}
			set
			{
				if ((this._bedID != value))
				{
					this.OnbedIDChanging(value);
					this.SendPropertyChanging();
					this._bedID = value;
					this.SendPropertyChanged("bedID");
					this.OnbedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bedName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string bedName
		{
			get
			{
				return this._bedName;
			}
			set
			{
				if ((this._bedName != value))
				{
					this.OnbedNameChanging(value);
					this.SendPropertyChanging();
					this._bedName = value;
					this.SendPropertyChanged("bedName");
					this.OnbedNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					if (this._PlantType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_length", DbType="Int")]
		public System.Nullable<int> length
		{
			get
			{
				return this._length;
			}
			set
			{
				if ((this._length != value))
				{
					this.OnlengthChanging(value);
					this.SendPropertyChanging();
					this._length = value;
					this.SendPropertyChanged("length");
					this.OnlengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_width", DbType="Int")]
		public System.Nullable<int> width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GardenBed_BedFeedbackValue", Storage="_BedFeedbackValue", ThisKey="bedID", OtherKey="bedID", IsUnique=true, IsForeignKey=false)]
		public BedFeedbackValue BedFeedbackValue
		{
			get
			{
				return this._BedFeedbackValue.Entity;
			}
			set
			{
				BedFeedbackValue previousValue = this._BedFeedbackValue.Entity;
				if (((previousValue != value) 
							|| (this._BedFeedbackValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BedFeedbackValue.Entity = null;
						previousValue.GardenBed = null;
					}
					this._BedFeedbackValue.Entity = value;
					if ((value != null))
					{
						value.GardenBed = this;
					}
					this.SendPropertyChanged("BedFeedbackValue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantType_GardenBed", Storage="_PlantType", ThisKey="typeID", OtherKey="typeID", IsForeignKey=true)]
		public PlantType PlantType
		{
			get
			{
				return this._PlantType.Entity;
			}
			set
			{
				PlantType previousValue = this._PlantType.Entity;
				if (((previousValue != value) 
							|| (this._PlantType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlantType.Entity = null;
						previousValue.GardenBeds.Remove(this);
					}
					this._PlantType.Entity = value;
					if ((value != null))
					{
						value.GardenBeds.Add(this);
						this._typeID = value.typeID;
					}
					else
					{
						this._typeID = default(int);
					}
					this.SendPropertyChanged("PlantType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlantTypes")]
	public partial class PlantType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _typeID;
		
		private string _typeName;
		
		private System.Nullable<int> _cycle;
		
		private System.Nullable<int> _recWaterPerDay;
		
		private System.Nullable<int> _recFertilizerPerMonth;
		
		private System.Nullable<int> _lowestTemp;
		
		private System.Nullable<int> _highestTemp;
		
		private string _lowestMoisture;
		
		private string _highestMoisture;
		
		private EntitySet<GardenBed> _GardenBeds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OntypeNameChanging(string value);
    partial void OntypeNameChanged();
    partial void OncycleChanging(System.Nullable<int> value);
    partial void OncycleChanged();
    partial void OnrecWaterPerDayChanging(System.Nullable<int> value);
    partial void OnrecWaterPerDayChanged();
    partial void OnrecFertilizerPerMonthChanging(System.Nullable<int> value);
    partial void OnrecFertilizerPerMonthChanged();
    partial void OnlowestTempChanging(System.Nullable<int> value);
    partial void OnlowestTempChanged();
    partial void OnhighestTempChanging(System.Nullable<int> value);
    partial void OnhighestTempChanged();
    partial void OnlowestMoistureChanging(string value);
    partial void OnlowestMoistureChanged();
    partial void OnhighestMoistureChanging(string value);
    partial void OnhighestMoistureChanged();
    #endregion
		
		public PlantType()
		{
			this._GardenBeds = new EntitySet<GardenBed>(new Action<GardenBed>(this.attach_GardenBeds), new Action<GardenBed>(this.detach_GardenBeds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string typeName
		{
			get
			{
				return this._typeName;
			}
			set
			{
				if ((this._typeName != value))
				{
					this.OntypeNameChanging(value);
					this.SendPropertyChanging();
					this._typeName = value;
					this.SendPropertyChanged("typeName");
					this.OntypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cycle", DbType="Int")]
		public System.Nullable<int> cycle
		{
			get
			{
				return this._cycle;
			}
			set
			{
				if ((this._cycle != value))
				{
					this.OncycleChanging(value);
					this.SendPropertyChanging();
					this._cycle = value;
					this.SendPropertyChanged("cycle");
					this.OncycleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recWaterPerDay", DbType="Int")]
		public System.Nullable<int> recWaterPerDay
		{
			get
			{
				return this._recWaterPerDay;
			}
			set
			{
				if ((this._recWaterPerDay != value))
				{
					this.OnrecWaterPerDayChanging(value);
					this.SendPropertyChanging();
					this._recWaterPerDay = value;
					this.SendPropertyChanged("recWaterPerDay");
					this.OnrecWaterPerDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recFertilizerPerMonth", DbType="Int")]
		public System.Nullable<int> recFertilizerPerMonth
		{
			get
			{
				return this._recFertilizerPerMonth;
			}
			set
			{
				if ((this._recFertilizerPerMonth != value))
				{
					this.OnrecFertilizerPerMonthChanging(value);
					this.SendPropertyChanging();
					this._recFertilizerPerMonth = value;
					this.SendPropertyChanged("recFertilizerPerMonth");
					this.OnrecFertilizerPerMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lowestTemp", DbType="Int")]
		public System.Nullable<int> lowestTemp
		{
			get
			{
				return this._lowestTemp;
			}
			set
			{
				if ((this._lowestTemp != value))
				{
					this.OnlowestTempChanging(value);
					this.SendPropertyChanging();
					this._lowestTemp = value;
					this.SendPropertyChanged("lowestTemp");
					this.OnlowestTempChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_highestTemp", DbType="Int")]
		public System.Nullable<int> highestTemp
		{
			get
			{
				return this._highestTemp;
			}
			set
			{
				if ((this._highestTemp != value))
				{
					this.OnhighestTempChanging(value);
					this.SendPropertyChanging();
					this._highestTemp = value;
					this.SendPropertyChanged("highestTemp");
					this.OnhighestTempChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lowestMoisture", DbType="NVarChar(50)")]
		public string lowestMoisture
		{
			get
			{
				return this._lowestMoisture;
			}
			set
			{
				if ((this._lowestMoisture != value))
				{
					this.OnlowestMoistureChanging(value);
					this.SendPropertyChanging();
					this._lowestMoisture = value;
					this.SendPropertyChanged("lowestMoisture");
					this.OnlowestMoistureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_highestMoisture", DbType="NVarChar(50)")]
		public string highestMoisture
		{
			get
			{
				return this._highestMoisture;
			}
			set
			{
				if ((this._highestMoisture != value))
				{
					this.OnhighestMoistureChanging(value);
					this.SendPropertyChanging();
					this._highestMoisture = value;
					this.SendPropertyChanged("highestMoisture");
					this.OnhighestMoistureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlantType_GardenBed", Storage="_GardenBeds", ThisKey="typeID", OtherKey="typeID")]
		public EntitySet<GardenBed> GardenBeds
		{
			get
			{
				return this._GardenBeds;
			}
			set
			{
				this._GardenBeds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GardenBeds(GardenBed entity)
		{
			this.SendPropertyChanging();
			entity.PlantType = this;
		}
		
		private void detach_GardenBeds(GardenBed entity)
		{
			this.SendPropertyChanging();
			entity.PlantType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BedFeedbackValues")]
	public partial class BedFeedbackValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bedID;
		
		private int _temperature;
		
		private int _moisture;
		
		private int _light;
		
		private System.Nullable<int> _currentDay;
		
		private EntityRef<GardenBed> _GardenBed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbedIDChanging(int value);
    partial void OnbedIDChanged();
    partial void OntemperatureChanging(int value);
    partial void OntemperatureChanged();
    partial void OnmoistureChanging(int value);
    partial void OnmoistureChanged();
    partial void OnlightChanging(int value);
    partial void OnlightChanged();
    partial void OncurrentDayChanging(System.Nullable<int> value);
    partial void OncurrentDayChanged();
    #endregion
		
		public BedFeedbackValue()
		{
			this._GardenBed = default(EntityRef<GardenBed>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bedID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int bedID
		{
			get
			{
				return this._bedID;
			}
			set
			{
				if ((this._bedID != value))
				{
					if (this._GardenBed.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbedIDChanging(value);
					this.SendPropertyChanging();
					this._bedID = value;
					this.SendPropertyChanged("bedID");
					this.OnbedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_temperature", DbType="Int NOT NULL")]
		public int temperature
		{
			get
			{
				return this._temperature;
			}
			set
			{
				if ((this._temperature != value))
				{
					this.OntemperatureChanging(value);
					this.SendPropertyChanging();
					this._temperature = value;
					this.SendPropertyChanged("temperature");
					this.OntemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moisture", DbType="Int NOT NULL")]
		public int moisture
		{
			get
			{
				return this._moisture;
			}
			set
			{
				if ((this._moisture != value))
				{
					this.OnmoistureChanging(value);
					this.SendPropertyChanging();
					this._moisture = value;
					this.SendPropertyChanged("moisture");
					this.OnmoistureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_light", DbType="Int NOT NULL")]
		public int light
		{
			get
			{
				return this._light;
			}
			set
			{
				if ((this._light != value))
				{
					this.OnlightChanging(value);
					this.SendPropertyChanging();
					this._light = value;
					this.SendPropertyChanged("light");
					this.OnlightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentDay", DbType="Int")]
		public System.Nullable<int> currentDay
		{
			get
			{
				return this._currentDay;
			}
			set
			{
				if ((this._currentDay != value))
				{
					this.OncurrentDayChanging(value);
					this.SendPropertyChanging();
					this._currentDay = value;
					this.SendPropertyChanged("currentDay");
					this.OncurrentDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GardenBed_BedFeedbackValue", Storage="_GardenBed", ThisKey="bedID", OtherKey="bedID", IsForeignKey=true)]
		public GardenBed GardenBed
		{
			get
			{
				return this._GardenBed.Entity;
			}
			set
			{
				GardenBed previousValue = this._GardenBed.Entity;
				if (((previousValue != value) 
							|| (this._GardenBed.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GardenBed.Entity = null;
						previousValue.BedFeedbackValue = null;
					}
					this._GardenBed.Entity = value;
					if ((value != null))
					{
						value.BedFeedbackValue = this;
						this._bedID = value.bedID;
					}
					else
					{
						this._bedID = default(int);
					}
					this.SendPropertyChanged("GardenBed");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
